// Code generated by falafel 0.7 DO NOT EDIT.
package lndmobile

import (
	"context"
	"net"
	"sync"

	"google.golang.org/grpc"
	"google.golang.org/grpc/test/bufconn"
)

var (
	// lightningLis is a global in-memory buffer that listeners that is
	// referenced by the generated mobile APIs, such that all client calls
	// will be going through it.
	lightningLis = bufconn.Listen(100)

	// lightningLisDialOptions holds extra grpc options we'll apply
	// every time we dial the grpc server, such as TLS certificates.
	lightningLisDialOptions []grpc.DialOption

	// lightningLisOptionsMtx is a mutex used to grant exclusive acces
	// to the options slice.
	lightningLisOptionsMtx sync.Mutex
)

// addLightningLisDialOption to our list of global gprc options.
func addLightningLisDialOption(o ...grpc.DialOption) {
	lightningLisOptionsMtx.Lock()
	defer lightningLisOptionsMtx.Unlock()

	lightningLisDialOptions = append(lightningLisDialOptions, o...)
}

// applyLightningLisDialOptions applies the global grpc options to the
// given slice of options.
func applyLightningLisDialOptions(opts []grpc.DialOption) []grpc.DialOption {
	lightningLisOptionsMtx.Lock()
	defer lightningLisOptionsMtx.Unlock()

	return append(opts, lightningLisDialOptions...)
}

// getLightningLisConn dials lightningLis with the current dial options,
// and returns the grpc client connection.
func getLightningLisConn() (*grpc.ClientConn, func(), error) {
	conn, err := lightningLis.Dial()
	if err != nil {
		return nil, nil, err
	}

	// Set up a custom dialer using the listener conn.
	dialer := func(context.Context, string) (net.Conn, error) {
		return conn, nil
	}

	// Create a dial options array.
	opts := []grpc.DialOption{
		grpc.WithContextDialer(dialer),
	}

	// Apply any global server options.
	opts = applyLightningLisDialOptions(opts)

	// As address we use "localhost" to mimic a local connection.
	address := "localhost"
	clientConn, err := grpc.Dial(address, opts...)
	if err != nil {
		conn.Close()
		return nil, nil, err
	}

	closeConn := func() {
		conn.Close()
	}

	return clientConn, closeConn, nil
}

var (
	// walletUnlockerLis is a global in-memory buffer that listeners that is
	// referenced by the generated mobile APIs, such that all client calls
	// will be going through it.
	walletUnlockerLis = bufconn.Listen(100)

	// walletUnlockerLisDialOptions holds extra grpc options we'll apply
	// every time we dial the grpc server, such as TLS certificates.
	walletUnlockerLisDialOptions []grpc.DialOption

	// walletUnlockerLisOptionsMtx is a mutex used to grant exclusive acces
	// to the options slice.
	walletUnlockerLisOptionsMtx sync.Mutex
)

// addWalletUnlockerLisDialOption to our list of global gprc options.
func addWalletUnlockerLisDialOption(o ...grpc.DialOption) {
	walletUnlockerLisOptionsMtx.Lock()
	defer walletUnlockerLisOptionsMtx.Unlock()

	walletUnlockerLisDialOptions = append(walletUnlockerLisDialOptions, o...)
}

// applyWalletUnlockerLisDialOptions applies the global grpc options to the
// given slice of options.
func applyWalletUnlockerLisDialOptions(opts []grpc.DialOption) []grpc.DialOption {
	walletUnlockerLisOptionsMtx.Lock()
	defer walletUnlockerLisOptionsMtx.Unlock()

	return append(opts, walletUnlockerLisDialOptions...)
}

// getWalletUnlockerLisConn dials walletUnlockerLis with the current dial options,
// and returns the grpc client connection.
func getWalletUnlockerLisConn() (*grpc.ClientConn, func(), error) {
	conn, err := walletUnlockerLis.Dial()
	if err != nil {
		return nil, nil, err
	}

	// Set up a custom dialer using the listener conn.
	dialer := func(context.Context, string) (net.Conn, error) {
		return conn, nil
	}

	// Create a dial options array.
	opts := []grpc.DialOption{
		grpc.WithContextDialer(dialer),
	}

	// Apply any global server options.
	opts = applyWalletUnlockerLisDialOptions(opts)

	// As address we use "localhost" to mimic a local connection.
	address := "localhost"
	clientConn, err := grpc.Dial(address, opts...)
	if err != nil {
		conn.Close()
		return nil, nil, err
	}

	closeConn := func() {
		conn.Close()
	}

	return clientConn, closeConn, nil
}
