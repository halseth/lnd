// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autopilotrpc/autopilot.proto

/*
Package autopilotrpc is a generated protocol buffer package.

It is generated from these files:
	autopilotrpc/autopilot.proto

It has these top-level messages:
	StatusRequest
	StatusResponse
	ModifyStatusRequest
	ModifyStatusResponse
	QueryScoresRequest
	QueryScoresResponse
*/
package autopilotrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatusResponse struct {
	// / Indicates whether the autopilot is active or not.
	Active bool `protobuf:"varint,1,opt,name=active" json:"active,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StatusResponse) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type ModifyStatusRequest struct {
	// / Whether the autopilot agent should be enabled or not.
	Enable bool `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
}

func (m *ModifyStatusRequest) Reset()                    { *m = ModifyStatusRequest{} }
func (m *ModifyStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyStatusRequest) ProtoMessage()               {}
func (*ModifyStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ModifyStatusRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type ModifyStatusResponse struct {
}

func (m *ModifyStatusResponse) Reset()                    { *m = ModifyStatusResponse{} }
func (m *ModifyStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyStatusResponse) ProtoMessage()               {}
func (*ModifyStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type QueryScoresRequest struct {
	Pubkeys []string `protobuf:"bytes,1,rep,name=pubkeys" json:"pubkeys,omitempty"`
}

func (m *QueryScoresRequest) Reset()                    { *m = QueryScoresRequest{} }
func (m *QueryScoresRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryScoresRequest) ProtoMessage()               {}
func (*QueryScoresRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueryScoresRequest) GetPubkeys() []string {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

type QueryScoresResponse struct {
	Results []*QueryScoresResponse_HeuristicResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *QueryScoresResponse) Reset()                    { *m = QueryScoresResponse{} }
func (m *QueryScoresResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryScoresResponse) ProtoMessage()               {}
func (*QueryScoresResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryScoresResponse) GetResults() []*QueryScoresResponse_HeuristicResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type QueryScoresResponse_HeuristicResult struct {
	Heuristic string             `protobuf:"bytes,1,opt,name=heuristic" json:"heuristic,omitempty"`
	Scores    map[string]float64 `protobuf:"bytes,2,rep,name=scores" json:"scores,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (m *QueryScoresResponse_HeuristicResult) Reset()         { *m = QueryScoresResponse_HeuristicResult{} }
func (m *QueryScoresResponse_HeuristicResult) String() string { return proto.CompactTextString(m) }
func (*QueryScoresResponse_HeuristicResult) ProtoMessage()    {}
func (*QueryScoresResponse_HeuristicResult) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

func (m *QueryScoresResponse_HeuristicResult) GetHeuristic() string {
	if m != nil {
		return m.Heuristic
	}
	return ""
}

func (m *QueryScoresResponse_HeuristicResult) GetScores() map[string]float64 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func init() {
	proto.RegisterType((*StatusRequest)(nil), "autopilotrpc.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "autopilotrpc.StatusResponse")
	proto.RegisterType((*ModifyStatusRequest)(nil), "autopilotrpc.ModifyStatusRequest")
	proto.RegisterType((*ModifyStatusResponse)(nil), "autopilotrpc.ModifyStatusResponse")
	proto.RegisterType((*QueryScoresRequest)(nil), "autopilotrpc.QueryScoresRequest")
	proto.RegisterType((*QueryScoresResponse)(nil), "autopilotrpc.QueryScoresResponse")
	proto.RegisterType((*QueryScoresResponse_HeuristicResult)(nil), "autopilotrpc.QueryScoresResponse.HeuristicResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Autopilot service

type AutopilotClient interface {
	// *
	// Status returns whether the daemon's autopilot agent is active.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// *
	// ModifyStatus is used to modify the status of the autopilot agent, like
	// enabling or disabling it.
	ModifyStatus(ctx context.Context, in *ModifyStatusRequest, opts ...grpc.CallOption) (*ModifyStatusResponse, error)
	// *
	// QueryScores queries all available autopilot heuristics, in addition to any
	// active combination of these heruristics, for the scores they would give to
	// the given nodes.
	QueryScores(ctx context.Context, in *QueryScoresRequest, opts ...grpc.CallOption) (*QueryScoresResponse, error)
}

type autopilotClient struct {
	cc *grpc.ClientConn
}

func NewAutopilotClient(cc *grpc.ClientConn) AutopilotClient {
	return &autopilotClient{cc}
}

func (c *autopilotClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/autopilotrpc.Autopilot/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autopilotClient) ModifyStatus(ctx context.Context, in *ModifyStatusRequest, opts ...grpc.CallOption) (*ModifyStatusResponse, error) {
	out := new(ModifyStatusResponse)
	err := grpc.Invoke(ctx, "/autopilotrpc.Autopilot/ModifyStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autopilotClient) QueryScores(ctx context.Context, in *QueryScoresRequest, opts ...grpc.CallOption) (*QueryScoresResponse, error) {
	out := new(QueryScoresResponse)
	err := grpc.Invoke(ctx, "/autopilotrpc.Autopilot/QueryScores", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Autopilot service

type AutopilotServer interface {
	// *
	// Status returns whether the daemon's autopilot agent is active.
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// *
	// ModifyStatus is used to modify the status of the autopilot agent, like
	// enabling or disabling it.
	ModifyStatus(context.Context, *ModifyStatusRequest) (*ModifyStatusResponse, error)
	// *
	// QueryScores queries all available autopilot heuristics, in addition to any
	// active combination of these heruristics, for the scores they would give to
	// the given nodes.
	QueryScores(context.Context, *QueryScoresRequest) (*QueryScoresResponse, error)
}

func RegisterAutopilotServer(s *grpc.Server, srv AutopilotServer) {
	s.RegisterService(&_Autopilot_serviceDesc, srv)
}

func _Autopilot_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutopilotServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autopilotrpc.Autopilot/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutopilotServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autopilot_ModifyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutopilotServer).ModifyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autopilotrpc.Autopilot/ModifyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutopilotServer).ModifyStatus(ctx, req.(*ModifyStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autopilot_QueryScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutopilotServer).QueryScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autopilotrpc.Autopilot/QueryScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutopilotServer).QueryScores(ctx, req.(*QueryScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Autopilot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "autopilotrpc.Autopilot",
	HandlerType: (*AutopilotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Autopilot_Status_Handler,
		},
		{
			MethodName: "ModifyStatus",
			Handler:    _Autopilot_ModifyStatus_Handler,
		},
		{
			MethodName: "QueryScores",
			Handler:    _Autopilot_QueryScores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "autopilotrpc/autopilot.proto",
}

func init() { proto.RegisterFile("autopilotrpc/autopilot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x65, 0x52, 0xbe, 0xf4, 0xcb, 0x6d, 0xb5, 0x32, 0x2d, 0x25, 0xc4, 0x2e, 0xd2, 0x59, 0x65,
	0x63, 0xc4, 0xba, 0x51, 0xc1, 0x85, 0x88, 0x20, 0x88, 0x0b, 0xa7, 0xf4, 0x01, 0xd2, 0x38, 0x62,
	0x68, 0xe8, 0xc4, 0xf9, 0x29, 0xe4, 0x85, 0x7c, 0x0f, 0x9f, 0xcb, 0x8d, 0x34, 0x93, 0xd4, 0x44,
	0x42, 0xc5, 0xdd, 0x9c, 0x7b, 0xcf, 0x39, 0xf7, 0xce, 0x99, 0x81, 0x49, 0xa4, 0x15, 0xcf, 0x92,
	0x94, 0x2b, 0x91, 0xc5, 0xa7, 0x3b, 0x10, 0x66, 0x82, 0x2b, 0x8e, 0xfb, 0xf5, 0x2e, 0x19, 0xc0,
	0xc1, 0x5c, 0x45, 0x4a, 0x4b, 0xca, 0xde, 0x34, 0x93, 0x8a, 0x04, 0x70, 0x58, 0x15, 0x64, 0xc6,
	0xd7, 0x92, 0xe1, 0x31, 0xd8, 0x51, 0xac, 0x92, 0x0d, 0x73, 0x91, 0x8f, 0x82, 0xff, 0xb4, 0x44,
	0xe4, 0x04, 0x86, 0x8f, 0xfc, 0x39, 0x79, 0xc9, 0x1b, 0x06, 0x5b, 0x3a, 0x5b, 0x47, 0xcb, 0x74,
	0x47, 0x37, 0x88, 0x8c, 0x61, 0xd4, 0xa4, 0x1b, 0x7b, 0x12, 0x02, 0x7e, 0xd2, 0x4c, 0xe4, 0xf3,
	0x98, 0x0b, 0xb6, 0x73, 0x71, 0xa1, 0x9b, 0xe9, 0xe5, 0x8a, 0xe5, 0xd2, 0x45, 0x7e, 0x27, 0x70,
	0x68, 0x05, 0xc9, 0xbb, 0x05, 0xc3, 0x86, 0xa0, 0x5c, 0xf3, 0x01, 0xba, 0x82, 0x49, 0x9d, 0x2a,
	0xa3, 0xe8, 0xcd, 0xce, 0xc2, 0xfa, 0x4d, 0xc3, 0x16, 0x4d, 0x78, 0xcf, 0xb4, 0x48, 0xa4, 0x4a,
	0x62, 0x5a, 0x28, 0x69, 0xe5, 0xe0, 0x7d, 0x20, 0x18, 0xfc, 0x68, 0xe2, 0x09, 0x38, 0xaf, 0x55,
	0xa9, 0xb8, 0x9b, 0x43, 0xbf, 0x0b, 0x78, 0x01, 0xb6, 0x2c, 0xcc, 0x5d, 0xab, 0x98, 0x7e, 0xfd,
	0xe7, 0xe9, 0xa1, 0x69, 0xdf, 0xad, 0x95, 0xc8, 0x69, 0x69, 0xe6, 0x5d, 0x42, 0xaf, 0x56, 0xc6,
	0x47, 0xd0, 0x59, 0xb1, 0xbc, 0x9c, 0xbe, 0x3d, 0xe2, 0x11, 0xfc, 0xdb, 0x44, 0xa9, 0x66, 0xae,
	0xe5, 0xa3, 0x00, 0x51, 0x03, 0xae, 0xac, 0x0b, 0x34, 0xfb, 0x44, 0xe0, 0xdc, 0x54, 0x3b, 0xe0,
	0x5b, 0xb0, 0x4d, 0xf0, 0xf8, 0xb8, 0xb9, 0x59, 0xe3, 0xf5, 0xbc, 0x49, 0x7b, 0xb3, 0xcc, 0x78,
	0x01, 0xfd, 0xfa, 0x1b, 0xe2, 0x69, 0x93, 0xdd, 0xf2, 0x1d, 0x3c, 0xb2, 0x8f, 0x52, 0xda, 0x52,
	0xe8, 0xd5, 0xf2, 0xc1, 0xfe, 0x9e, 0xe8, 0x8c, 0xe9, 0xf4, 0xd7, 0x70, 0x97, 0x76, 0xf1, 0xdb,
	0xcf, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x05, 0x89, 0xa4, 0xfe, 0x0d, 0x03, 0x00, 0x00,
}
