// Code generated by protoc-gen-go. DO NOT EDIT.
// source: autopilot/autopilot.proto

/*
Package autopilot is a generated protocol buffer package.

It is generated from these files:
	autopilot/autopilot.proto

It has these top-level messages:
	GetStatusRequest
	GetStatusResponse
	EnableRequest
	EnableResponse
	SetNodeScoresRequest
	SetNodeScoresResponse
*/
package autopilot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetStatusRequest struct {
}

func (m *GetStatusRequest) Reset()                    { *m = GetStatusRequest{} }
func (m *GetStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStatusRequest) ProtoMessage()               {}
func (*GetStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetStatusResponse struct {
	// / Indicates whther the autopilot is active or not.
	Active bool `protobuf:"varint,1,opt,name=active" json:"active,omitempty"`
}

func (m *GetStatusResponse) Reset()                    { *m = GetStatusResponse{} }
func (m *GetStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*GetStatusResponse) ProtoMessage()               {}
func (*GetStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetStatusResponse) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type EnableRequest struct {
	// / Whether the autopilot agent should be enabled or not.
	Enable bool `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
}

func (m *EnableRequest) Reset()                    { *m = EnableRequest{} }
func (m *EnableRequest) String() string            { return proto.CompactTextString(m) }
func (*EnableRequest) ProtoMessage()               {}
func (*EnableRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EnableRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type EnableResponse struct {
}

func (m *EnableResponse) Reset()                    { *m = EnableResponse{} }
func (m *EnableResponse) String() string            { return proto.CompactTextString(m) }
func (*EnableResponse) ProtoMessage()               {}
func (*EnableResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SetNodeScoresRequest struct {
	// / A map from pubkeys to scores for routing nodes.
	Scores map[string]uint32 `protobuf:"bytes,1,rep,name=scores" json:"scores,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *SetNodeScoresRequest) Reset()                    { *m = SetNodeScoresRequest{} }
func (m *SetNodeScoresRequest) String() string            { return proto.CompactTextString(m) }
func (*SetNodeScoresRequest) ProtoMessage()               {}
func (*SetNodeScoresRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SetNodeScoresRequest) GetScores() map[string]uint32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

type SetNodeScoresResponse struct {
}

func (m *SetNodeScoresResponse) Reset()                    { *m = SetNodeScoresResponse{} }
func (m *SetNodeScoresResponse) String() string            { return proto.CompactTextString(m) }
func (*SetNodeScoresResponse) ProtoMessage()               {}
func (*SetNodeScoresResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*GetStatusRequest)(nil), "autopilot.GetStatusRequest")
	proto.RegisterType((*GetStatusResponse)(nil), "autopilot.GetStatusResponse")
	proto.RegisterType((*EnableRequest)(nil), "autopilot.EnableRequest")
	proto.RegisterType((*EnableResponse)(nil), "autopilot.EnableResponse")
	proto.RegisterType((*SetNodeScoresRequest)(nil), "autopilot.SetNodeScoresRequest")
	proto.RegisterType((*SetNodeScoresResponse)(nil), "autopilot.SetNodeScoresResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Autopilot service

type AutopilotClient interface {
	// *
	// GetStatus returns the status of the daemon's autopilot agent.
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// *
	// Enable is used to enable or disable the autopilot agent.
	Enable(ctx context.Context, in *EnableRequest, opts ...grpc.CallOption) (*EnableResponse, error)
	// *
	// SetNodeScores us used to supply the autopilot agent with nodes and
	// availability scores.
	SetNodeScores(ctx context.Context, in *SetNodeScoresRequest, opts ...grpc.CallOption) (*SetNodeScoresResponse, error)
}

type autopilotClient struct {
	cc *grpc.ClientConn
}

func NewAutopilotClient(cc *grpc.ClientConn) AutopilotClient {
	return &autopilotClient{cc}
}

func (c *autopilotClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := grpc.Invoke(ctx, "/autopilot.Autopilot/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autopilotClient) Enable(ctx context.Context, in *EnableRequest, opts ...grpc.CallOption) (*EnableResponse, error) {
	out := new(EnableResponse)
	err := grpc.Invoke(ctx, "/autopilot.Autopilot/Enable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autopilotClient) SetNodeScores(ctx context.Context, in *SetNodeScoresRequest, opts ...grpc.CallOption) (*SetNodeScoresResponse, error) {
	out := new(SetNodeScoresResponse)
	err := grpc.Invoke(ctx, "/autopilot.Autopilot/SetNodeScores", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Autopilot service

type AutopilotServer interface {
	// *
	// GetStatus returns the status of the daemon's autopilot agent.
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// *
	// Enable is used to enable or disable the autopilot agent.
	Enable(context.Context, *EnableRequest) (*EnableResponse, error)
	// *
	// SetNodeScores us used to supply the autopilot agent with nodes and
	// availability scores.
	SetNodeScores(context.Context, *SetNodeScoresRequest) (*SetNodeScoresResponse, error)
}

func RegisterAutopilotServer(s *grpc.Server, srv AutopilotServer) {
	s.RegisterService(&_Autopilot_serviceDesc, srv)
}

func _Autopilot_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutopilotServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autopilot.Autopilot/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutopilotServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autopilot_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutopilotServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autopilot.Autopilot/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutopilotServer).Enable(ctx, req.(*EnableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autopilot_SetNodeScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNodeScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutopilotServer).SetNodeScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autopilot.Autopilot/SetNodeScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutopilotServer).SetNodeScores(ctx, req.(*SetNodeScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Autopilot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "autopilot.Autopilot",
	HandlerType: (*AutopilotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _Autopilot_GetStatus_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _Autopilot_Enable_Handler,
		},
		{
			MethodName: "SetNodeScores",
			Handler:    _Autopilot_SetNodeScores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "autopilot/autopilot.proto",
}

func init() { proto.RegisterFile("autopilot/autopilot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x4e, 0xc2, 0x40,
	0x14, 0xcc, 0x96, 0xd8, 0xd8, 0x87, 0x20, 0xae, 0xa0, 0xa5, 0x92, 0xd8, 0xec, 0x45, 0x02, 0x09,
	0x8d, 0x78, 0x51, 0x6e, 0xc6, 0x10, 0x6f, 0x1e, 0x8a, 0x27, 0x6f, 0x0b, 0xbc, 0x90, 0xc6, 0xda,
	0xad, 0x74, 0x4b, 0xc2, 0xd5, 0x5f, 0x30, 0xf1, 0x2b, 0xfc, 0x1b, 0x7f, 0xc1, 0x0f, 0x31, 0xec,
	0xb6, 0x58, 0x08, 0xc6, 0xdb, 0xbe, 0xd9, 0x79, 0x33, 0xb3, 0xd3, 0x42, 0x93, 0xa7, 0x52, 0xc4,
	0x41, 0x28, 0xa4, 0xb7, 0x3e, 0xf5, 0xe2, 0xb9, 0x90, 0x82, 0x5a, 0x6b, 0xc0, 0x69, 0xcd, 0x84,
	0x98, 0x85, 0xe8, 0xf1, 0x38, 0xf0, 0x78, 0x14, 0x09, 0xc9, 0x65, 0x20, 0xa2, 0x44, 0x13, 0x19,
	0x85, 0xda, 0x3d, 0xca, 0x91, 0xe4, 0x32, 0x4d, 0x7c, 0x7c, 0x4d, 0x31, 0x91, 0xac, 0x0b, 0x47,
	0x05, 0x2c, 0x89, 0x45, 0x94, 0x20, 0x3d, 0x01, 0x93, 0x4f, 0x64, 0xb0, 0x40, 0x9b, 0xb8, 0xa4,
	0xbd, 0xef, 0x67, 0x13, 0xbb, 0x80, 0xca, 0x30, 0xe2, 0xe3, 0x10, 0xb3, 0xed, 0x15, 0x11, 0x15,
	0x90, 0x13, 0xf5, 0xc4, 0x6a, 0x50, 0xcd, 0x89, 0x5a, 0x92, 0x7d, 0x10, 0xa8, 0x8f, 0x50, 0x3e,
	0x88, 0x29, 0x8e, 0x26, 0x62, 0x8e, 0x79, 0x00, 0x7a, 0x07, 0x66, 0xa2, 0x00, 0x9b, 0xb8, 0xa5,
	0x76, 0xb9, 0xdf, 0xed, 0xfd, 0xbe, 0x6f, 0xd7, 0x42, 0x4f, 0x4f, 0xc3, 0x48, 0xce, 0x97, 0x7e,
	0xb6, 0xea, 0xdc, 0x40, 0xb9, 0x00, 0xd3, 0x1a, 0x94, 0x9e, 0x71, 0xa9, 0x32, 0x59, 0xfe, 0xea,
	0x48, 0xeb, 0xb0, 0xb7, 0xe0, 0x61, 0x8a, 0xb6, 0xe1, 0x92, 0x76, 0xc5, 0xd7, 0xc3, 0xc0, 0xb8,
	0x26, 0xec, 0x14, 0x1a, 0x5b, 0x36, 0x3a, 0x71, 0xff, 0xd3, 0x00, 0xeb, 0x36, 0x8f, 0x42, 0x9f,
	0xc0, 0x5a, 0xf7, 0x44, 0xcf, 0x0a, 0x19, 0xb7, 0x1b, 0x75, 0x5a, 0xbb, 0x2f, 0xb3, 0x1e, 0xe8,
	0xdb, 0xd7, 0xf7, 0xbb, 0x71, 0x40, 0xc1, 0x5b, 0x5c, 0x7a, 0x89, 0x96, 0x7b, 0x04, 0x53, 0xb7,
	0x45, 0xed, 0xc2, 0xee, 0x46, 0xd3, 0x4e, 0x73, 0xc7, 0x4d, 0x26, 0xd9, 0x50, 0x92, 0x87, 0x4c,
	0x49, 0xea, 0x0f, 0x30, 0x20, 0x1d, 0xfa, 0x02, 0x95, 0x8d, 0x87, 0xd1, 0xf3, 0x7f, 0x9a, 0x75,
	0xdc, 0xbf, 0x09, 0x99, 0x55, 0x53, 0x59, 0x1d, 0xb3, 0xea, 0xca, 0x2a, 0x12, 0x53, 0xd4, 0xfd,
	0x0f, 0x48, 0x67, 0x6c, 0xaa, 0x7f, 0xec, 0xea, 0x27, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xd3, 0xdd,
	0xb3, 0xa9, 0x02, 0x00, 0x00,
}
