// Code generated by falafel 0.7. DO NOT EDIT.
// source: watchtowerrpc/watchtower.proto

// +build watchtowerrpc

package lndmobile

import (
	"context"

	"github.com/golang/protobuf/proto"

	"github.com/lightningnetwork/lnd/lnrpc/watchtowerrpc"
)

// getWatchtowerClient returns a client connection to the server listening
// on lis.
func getWatchtowerClient() (watchtowerrpc.WatchtowerClient, func(), error) {
	clientConn, closeConn, err := getLightningLisConn()
	if err != nil {
		return nil, nil, err
	}
	client := watchtowerrpc.NewWatchtowerClient(clientConn)
	return client, closeConn, nil
}

// GetInfo returns general information concerning the companion watchtower
// including it's public key and URIs where the server is currently
// listening for clients.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func GetInfo(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &watchtowerrpc.GetInfoRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getWatchtowerClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*watchtowerrpc.GetInfoRequest)
			return client.GetInfo(ctx, r)
		},
	}
	s.start(msg, callback)
}
