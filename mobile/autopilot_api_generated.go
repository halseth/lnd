// Code generated by falafel 0.7. DO NOT EDIT.
// source: autopilotrpc/autopilot.proto

// +build autopilotrpc

package lndmobile

import (
	"context"

	"github.com/golang/protobuf/proto"

	"github.com/lightningnetwork/lnd/lnrpc/autopilotrpc"
)

// getAutopilotClient returns a client connection to the server listening
// on lis.
func getAutopilotClient() (autopilotrpc.AutopilotClient, func(), error) {
	clientConn, closeConn, err := getLightningLisConn()
	if err != nil {
		return nil, nil, err
	}
	client := autopilotrpc.NewAutopilotClient(clientConn)
	return client, closeConn, nil
}

// Status returns whether the daemon's autopilot agent is active.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func Status(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &autopilotrpc.StatusRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getAutopilotClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*autopilotrpc.StatusRequest)
			return client.Status(ctx, r)
		},
	}
	s.start(msg, callback)
}

// ModifyStatus is used to modify the status of the autopilot agent, like
// enabling or disabling it.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func ModifyStatus(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &autopilotrpc.ModifyStatusRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getAutopilotClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*autopilotrpc.ModifyStatusRequest)
			return client.ModifyStatus(ctx, r)
		},
	}
	s.start(msg, callback)
}

// QueryScores queries all available autopilot heuristics, in addition to any
// active combination of these heruristics, for the scores they would give to
// the given nodes.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func QueryScores(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &autopilotrpc.QueryScoresRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getAutopilotClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*autopilotrpc.QueryScoresRequest)
			return client.QueryScores(ctx, r)
		},
	}
	s.start(msg, callback)
}

// SetScores attempts to set the scores used by the running autopilot agent,
// if the external scoring heuristic is enabled.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func SetScores(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &autopilotrpc.SetScoresRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getAutopilotClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*autopilotrpc.SetScoresRequest)
			return client.SetScores(ctx, r)
		},
	}
	s.start(msg, callback)
}
