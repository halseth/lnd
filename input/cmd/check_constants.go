package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"text/template"

	"github.com/davecgh/go-spew/spew"
)

func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: gen or check")
		return
	}

	switch os.Args[1] {
	case "gen":
		if err := generateVars(); err != nil {
			log.Fatal(err)
		}

	case "check":
		for _, s := range SizeConstants {
			exp := fmt.Sprintf("%s %d", s.name, s.size)
			if exp == s.doc {
				continue
			}

			fmt.Printf("Expected godoc '%v' had '%v'\n", exp, s.doc)
		}
	}
}

func generateVars() error {
	var constNames []string
	constMap := make(map[string]string)
	err := readConstants(func(l string) {
		if strings.Contains(l, "//") {
			return
		}
		// Find constants.
		c := strings.Split(l, "=")
		if len(c) != 2 {
			return
		}

		// Ignore constants that aren't exported.
		n := strings.ToUpper(c[0])
		if n[0] != c[0][0] {
			return
		}

		v := strings.TrimSpace(c[0])
		constNames = append(constNames, v)
		constMap[v] = ""
	})
	if err != nil {
		return err
	}

	var docs []string
	err = readConstants(func(line string) {
		if !strings.HasPrefix(line, "// ") {
			return
		}
		//		if !strings.HasSuffix(line, "bytes") {
		//			return
		//		}

		l := strings.TrimPrefix(line, "// ")
		nn := strings.Split(l, " ")
		if len(nn) < 2 {
			return
		}

		name := nn[0]
		size := nn[1]

		_, err = strconv.ParseInt(size, 10, 64)
		if err != nil {
			return
		}

		if _, ok := constMap[name]; !ok {
			return
		}

		doc := fmt.Sprintf("%s %s", name, size)
		fmt.Println("doc", doc)
		constMap[name] = doc
		docs = append(docs, doc)

	})
	if err != nil {
		return err
	}

	fmt.Println("soncts:", spew.Sdump(constNames))

	out, err := os.Create("extraced.go")
	if err != nil {
		return err
	}
	defer out.Close()

	templ.Execute(out, struct {
		Constants []string
		Docs      []string
		Consts    map[string]string
	}{
		Constants: constNames,
		Docs:      docs,
		Consts:    constMap,
	})

	return nil
}

func readConstants(f func(string)) error {

	file, err := os.Open("../size.go")
	if err != nil {
		return err
	}
	defer file.Close()

	r := bufio.NewReader(file)

	start := false
	for {
		l, err := r.ReadString('\n')
		if err != nil {
			return err
		}
		// Ignore empty lines and line with comments.
		//	l = strings.ReplaceAll(l, " ", "")
		l = strings.ReplaceAll(l, "\n", "")
		l = strings.ReplaceAll(l, "\t", "")
		l = strings.TrimSpace(l)
		if l == "" {
			continue
		}

		if strings.HasPrefix(l, "const") {
			start = true
			fmt.Println("started!")
			continue
		}

		if !start {
			continue
		}
		//fmt.Println(l)
		f(l)

		if strings.HasPrefix(l, ")") {
			fmt.Println("done!")
			break
		}

	}

	return nil
}

type constPair struct {
	name string
	size int64
	doc  string
}

var templ = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package main

import "github.com/lightningnetwork/lnd/input"

var SizeConstants = []constPair{
{{- range $key, $val := .Consts}}
	{{"{"}}
		name: {{ printf "%q" $key }},
		size: {{ printf "input.%s" $key }},
		doc:  {{ printf "%q" $val }},
	{{"}"}},
{{- end }}
}
`))
